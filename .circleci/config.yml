# version: 2.1

# orbs:
#   python: circleci/python@2.1.1
#   aws-cli: circleci/aws-cli@2.0

# jobs:
#   build-and-test:
#     docker:
#       - image: cimg/python:3.11.6
#     steps:
#       - checkout
#       - python/install-packages:
#           pkg-manager: pip
#       # - run:
#       #     name: Setup virtualenv
#       #     command: |
#       #       virtualenv venv
#       - run:
#           name: Upgrade pip
#           command: |
#             . venv/bin/activate
#             pip install --upgrade pip
#       - run:
#           name: Install production dependencies
#           command: |
#             . venv/bin/activate
#             pip install -r requirements.txt
#       - run:
#           name: Install Gunicorn
#           command: |
#             . venv/bin/activate
#             pip install gunicorn
#       - run:
#           name: Set Flask environment
#           command: echo 'export FLASK_ENV=production' >> $BASH_ENV
#       - run:
#           name: Run database migrations
#           command: |
#             . venv/bin/activate
#             if [ -d "migrations" ]; then
#               flask db upgrade
#             fi
#       - run:
#           name: Collect static files
#           command: |
#             . venv/bin/activate
#             if [ -d "static" ]; then
#               echo "Implement static file collection here if needed"
#             fi
#       - run:
#           name: Run tests
#           command: |
#             . venv/bin/activate
#             # python -m pytest
#       - run:
#           name: Compile Python bytecode
#           command: |
#             . venv/bin/activate
#             python -m compileall .
#       - run:
#           name: Update requirements.txt
#           command: |
#             . venv/bin/activate
#             pip freeze > requirements.txt
#       - run:
#           name: Create wsgi.py
#           command: |
#             echo "from app import app" > wsgi.py
#             echo "" >> wsgi.py
#             echo 'if __name__ == "__main__":' >> wsgi.py
#             echo '    app.run()' >> wsgi.py
#       - persist_to_workspace:
#           root: .
#           paths:
#             - .  

#   deploy-to-eb:
#     docker:
#       - image: cimg/python:3.11.6
#     steps:
#       - attach_workspace:
#           at: .
#       - aws-cli/setup
#       - run:
#           name: View Path
#           command: pwd
#       - run:
#           name: List Directory Contents
#           command: ls -la
#       - run:
#           name: Get Commit Short SHA
#           command: |
#             export SHORT_SHA=$(echo $CIRCLE_SHA1 | cut -c 1-7)
#       - run:
#           name: Install AWS Elastic Beanstalk CLI
#           command: |
#             pip install awsebcli
#       - run:
#           name: Configure AWS Credentials
#           command: |
#             aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
#             aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
#             aws configure set default.region $AWS_DEFAULT_REGION
#       - run:
#           name: Initialize Elastic Beanstalk
#           command: eb init dl4 --platform "Python 3.11 running on 64bit Amazon Linux 2023" --region us-east-2
#       - run:
#           name: Deploy to Elastic Beanstalk
#           command: |
#             SHORTSHA=$(git rev-parse --short HEAD)
#             eb use Dl4-prod
#             eb deploy --label $SHORTSHA


# workflows:
#   version: 2
#   build-test-deploy:
#     jobs:
#       - build-and-test:
#           filters:
#             branches:
#               only: main
#       - deploy-to-eb:
#           requires:
#             - build-and-test
#           filters:
#             branches:
#               only: main

version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0

jobs:
  build-and-test:
    docker:
      - image: cimg/python:3.11.6
    steps:
      - checkout
      - restore_cache:
          keys:
            - deps-{{ checksum "requirements.txt" }}
            
      # debug steps 
      - run:
          name: Debug Python and directory
          command: |
            which python
            python --version
            pwd
            ls -la
      - run:
          name: Create virtualenv and install dependencies
          command: |
            pip install --upgrade pip
            # sudo pip install virtualenv
            pip install virtualenv
            virtualenv venv
            . venv/bin/activate
            pip install -r requirements.txt


      # - run:
      #     name: Create venv and install dependencies
      #     command: |
      #       python -m venv venv
      #       . venv/bin/activate
      #       pip install --upgrade pip
      #       pip install -r requirements.txt
      
      - save_cache:
          paths:
            - ./venv
          key: deps-{{ checksum "requirements.txt" }}
      - run:
          name: Install Gunicorn
          command: |
            . venv/bin/activate
            pip install gunicorn
      - run:
          name: Set Flask environment
          command: echo 'export FLASK_ENV=production' >> $BASH_ENV
      - run:
          name: Run database migrations
          command: |
            . venv/bin/activate
            if [ -d "migrations" ]; then
              flask db upgrade
            fi
      - run:
          name: Run tests
          command: |
            . venv/bin/activate
            # python -m pytest
      - run:
          name: Compile Python bytecode
          command: |
            . venv/bin/activate
            python -m compileall .
      - run:
          name: Update requirements.txt
          command: |
            . venv/bin/activate
            pip freeze > requirements.txt
      - run:
          name: Create wsgi.py
          command: |
            echo "from app import app" > wsgi.py
            echo "" >> wsgi.py
            echo 'if __name__ == "__main__":' >> wsgi.py
            echo '    app.run()' >> wsgi.py
      - persist_to_workspace:
          root: .
          paths:
            - .  

  deploy-to-eb:
    docker:
      - image: cimg/python:3.11.6
    steps:
      - attach_workspace:
          at: .
      - aws-cli/setup
      - restore_cache:
          keys:
            - deps-{{ checksum "requirements.txt" }}
      - run:
          name: Install AWS Elastic Beanstalk CLI
          command: |
            . venv/bin/activate
            pip install awsebcli
      - run:
          name: Deploy to Elastic Beanstalk
          command: |
            . venv/bin/activate
            SHORTSHA=$(git rev-parse --short HEAD)
            eb use Dl4-prod
            eb deploy --label $SHORTSHA

workflows:
  version: 2
  build-test-deploy:
    jobs:
      - build-and-test:
          filters:
            branches:
              only: main
      - deploy-to-eb:
          requires:
            - build-and-test
          filters:
            branches:
              only: main